{"version":3,"sources":["assets/images/1.jpg","components/TopPage/TopHeader.tsx","components/TopPage/TopFooter.tsx","components/TopPage/TopMain.tsx","firebase.ts","components/DownloadPage/DownloadItem.tsx","pages/DownloadPage.tsx","components/ResultPage/ResultImagelist.tsx","pages/ResultPage.tsx","components/FavPage/FavItemlist.tsx","pages/FavPage.tsx","pages/TopPage.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TopHeader","history","useHistory","AppBar","position","Button","variant","onClick","push","useStyles","makeStyles","createStyles","footer","backgroundColor","textAlign","color","padding","footer_p","margin","fontSize","TopFooter","classes","className","useStyle","background","backgroundImage","rebius","backgroundSize","height","paper","marginLeft","marginRight","top","width","inputbase","TopMain","useState","keyword","setKeyword","Paper","onSubmit","component","type","InputBase","placeholder","onChange","event","target","value","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","tileImage","main","marginTop","btn","DownloadItem","useParams","data","setData","getData","searchWord","a","db","firestore","tileDataRef","collection","searchData","where","get","snapShot","temporaryData","docs","map","doc","useEffect","tile","key","title","src","image","alt","href","downloadUrl","DownloadPage","root","display","flexWrap","ImageItemlist","favClick","update","favorite","length","ResultPage","favImage","FavItemlist","favDataRef","console","log","clearButton","clear","FavPage","TopPage","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ef32bfc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.bcc367c4.jpg\";","import React, { FC } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst TopHeader: FC = () => {\n    const history = useHistory();\n\n    return (\n        <AppBar position='static'>\n            <ToolBar>\n                <h2>React with TypeScript</h2>\n                <Button variant=\"contained\" onClick={() => history.push('/favorite/')}>お気に入り</Button>\n            </ToolBar>\n        </AppBar>\n    );\n}\n\nexport default TopHeader;","import React, { FC } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        footer: {\n            backgroundColor: '#1B2F73',\n            textAlign: 'center',\n            color: 'white',\n            padding: '30px 0px',\n        },\n        footer_p: {\n            margin: '0px',\n            fontSize: '20px',\n        }\n    })\n)\n\nconst TopFooter: FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.footer}>\n            <p className={classes.footer_p}>Copy Right Murata Riku</p>\n        </div>\n    );\n}\n\nexport default TopFooter;","import React, { FC, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport rebius from '../../assets/images/1.jpg';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport IconBtn from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyle = makeStyles(() =>\n    createStyles({\n        background: {\n            backgroundImage: `url(${rebius})`,\n            backgroundSize: 'cover',\n            height: '100vh',\n        },\n        paper: {\n            position: 'relative',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            top: '33%',\n            width: '45%',\n        },\n        inputbase: {\n            width: '80%'\n        }\n    }),\n)\n\nconst TopMain: FC = () => {\n    const classes = useStyle();\n    //定義したuseStyleをこのコンポーネントで使えるようにした。\n    const [keyword, setKeyword] = useState('');\n    //値を保持する変数とその変数を処理する関数を定義する\n    const history = useHistory();\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setKeyword(event.target.value);\n        //ここの関数の引数にセットされるものが変数keywordに格納される。\n    }\n\n    const handleSubmit = () => {\n        history.push(\"/search/\" + keyword);\n    }\n    \n    return (\n        <div className={classes.background}>\n            <Paper className={classes.paper} onSubmit={handleSubmit} component=\"form\">\n                <IconBtn type=\"submit\">\n                    <SearchIcon />\n                </IconBtn>\n                <InputBase placeholder=\"検索する文字列を入力してください。\" className={classes.inputbase} onChange={handleChange} />\n            </Paper>\n        </div>\n    )\n}\n\nexport default TopMain;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/firebase-storage';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAhnsgWw6aRdbGAz5B3hORYhQD-067bjyo\",\n    authDomain: \"distoribution.firebaseapp.com\",\n    databaseURL: \"https://distoribution.firebaseio.com\",\n    projectId: \"distoribution\",\n    storageBucket: \"distoribution.appspot.com\",\n    messagingSenderId: \"983160578802\",\n    appId: \"1:983160578802:web:e0b3d9751799786574266b\",\n    measurementId: \"G-YR46J8ZV08\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { FC, useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport firebase from '../../firebase';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { TileData } from '../../types/types';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tileImage: {\n            height: '436px',\n            width: '436px'\n        },\n        main: {\n            textAlign: 'center',\n            marginTop: '100px',\n        },\n        btn: {\n            marginTop: '10px'\n        }\n    }),\n)\n\nconst DownloadItem: FC = () => {\n    const { keyword } = useParams();\n    const history = useHistory();\n    const classes = useStyles();\n    const [data, setData] = useState<TileData[]>([]);\n\n    const getData = async (searchWord: string | undefined) => {\n        const db = firebase.firestore();\n        const tileDataRef = db.collection('tileData');\n        const searchData = tileDataRef.where('keyword', 'array-contains', searchWord);\n        const snapShot = await searchData.get();\n        const temporaryData: object[] = [];\n\n        snapShot.docs.map((doc) => {\n            temporaryData.push(doc.data());\n        });\n\n        setData(temporaryData as TileData[]);\n    }\n\n    useEffect(() => {\n        getData(keyword);\n    }, []);\n\n    const displayImage = () => {\n        return (\n            <div>\n                {data.map((tile) => (\n                    <div key={tile.title}>\n                        <img src={tile.image} alt={tile.title} className={classes.tileImage} />\n                    </div>\n                ))}\n            </div>\n        )\n    }\n\n    const downloadButton = () => {\n        return (\n            <div>\n                {data.map((tile) => (\n                    <Button variant=\"contained\" href={tile.downloadUrl} key={tile.title}>Download</Button>\n                ))}\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <div className={classes.main}>\n                {displayImage()}\n                {downloadButton()}\n                <Button variant=\"contained\" onClick={() => history.push('/')} className={classes.btn}>TOPPAGEに戻る</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default DownloadItem;","import React, { FC, useState, useEffect } from 'react';\nimport TopHeader from '../components/TopPage/TopHeader';\nimport TopFooter from '../components/TopPage/TopFooter';\nimport DownloadItem from '../components/DownloadPage/DownloadItem';\n\nconst DownloadPage: FC = () => {\n    return (\n        <div>\n            <TopHeader />\n            <DownloadItem/>\n            <TopFooter/>\n        </div>\n    );\n}\n\nexport default DownloadPage;","import React, { FC, useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport firebase from '../../firebase';\nimport { TileData } from '../../types/types';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            width: '80%',\n            textAlign: 'center',\n            marginTop: '2%',\n        },\n        tileImage: {\n            height: '218px',\n            width: '218px'\n        }\n    }),\n)\n\nconst ImageItemlist: FC = () => {\n    const [data, setData] = useState<TileData[]>([]);\n    const { keyword } = useParams();\n    const classes = useStyles();\n    const history = useHistory();\n\n    const getData = async (searchWord: string | undefined) => {\n        const db = firebase.firestore();\n        const tileDataRef = db.collection('tileData');\n        const searchData = tileDataRef.where('keyword', 'array-contains', searchWord);\n        const snapShot = await searchData.get();\n        const temporaryData: object[] = [];\n        snapShot.docs.map((doc) => {\n            temporaryData.push(doc.data());\n        });\n        setData(temporaryData as TileData[]);\n    }\n\n    const favClick = async (target: string) => {\n        const db = firebase.firestore();\n        const tileDataRef = db.collection('tileData');\n        const favDataRef = tileDataRef.doc(target);\n        //doc()にはドキュメントIDを入れる。ドキュメント🆔とはドキュメントの名前のことである。\n        favDataRef.update({\n            favorite: true\n        });\n    }\n\n    useEffect(() => {\n        getData(keyword);\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            {data.length != 0\n                ?\n                <div>\n                    {data.map((tile) => (\n                        <div key={tile.title}>\n                            <Button onClick={() => history.push('/download/' + tile.title)}>\n                                <img src={tile.image} alt={tile.title} className={classes.tileImage} />\n                            </Button>\n                            <h3>{tile.title}</h3>\n                            <Button variant=\"contained\" onClick={() => favClick(tile.title)}>お気に入り登録</Button>\n                        </div>\n                    ))}\n                </div>\n                :\n                <p>入力に合致する素材はありません。</p>\n            }\n            <Button variant=\"contained\" onClick={() => history.push('/')}>TOPPAGEに戻る</Button>\n        </div>\n    );\n}\n\nexport default ImageItemlist;","import React, { FC } from 'react';\nimport TopHeader from '../components/TopPage/TopHeader';\nimport TopFooter from '../components/TopPage/TopFooter';\nimport ImageItemlist from '../components/ResultPage/ResultImagelist';\n\nconst ResultPage: FC = () => {\n    return (\n        <div>\n            <TopHeader/>\n            <ImageItemlist/>\n            <TopFooter/>\n        </div>\n    );\n}\n\nexport default ResultPage;","import React, { FC, useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport firebase from '../../firebase';\nimport { TileData } from '../../types/types';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        favImage: {\n            height: '200px',\n            width: '200px'\n        },\n        main: {\n            textAlign: 'center',\n            marginTop: '100px',\n        },\n        btn: {\n            marginTop: '10px'\n        }\n    }),\n)\n\nconst FavItemlist: FC = () => {\n    const history = useHistory();\n    const classes = useStyles();\n    const [data, setData] = useState<TileData[]>([]);\n\n    const getData = async () => {\n        const db = firebase.firestore();\n        const tileDataRef = db.collection('tileData');\n        const favDataRef = tileDataRef.where('favorite', '==', true);\n        const snapShot = await favDataRef.get();\n        const temporaryData: object[] = [];\n\n        snapShot.docs.map((doc) => {\n            temporaryData.push(doc.data());\n        });\n\n        setData(temporaryData as TileData[]);\n        console.log(data);\n    }\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    const clear = (target: string) => {\n        const db = firebase.firestore();\n        const tileDataRef = db.collection('tileData');\n        const favDataRef = tileDataRef.doc(target);\n        favDataRef.update({\n            favorite: false\n        });\n    }\n\n    const clearButton = (target: string) => {\n        return (\n            <div>\n                <Button variant=\"contained\" onClick={() => clear(target)} key={target}>お気に入り解除</Button>\n            </div>\n        )\n    }\n\n    const showFavImage = () => {\n        return (\n            <div>\n                {data.length != 0\n                    ?\n                    <div>\n                        {data.map((tile) => (\n                            <div key={tile.title}>\n                                <img src={tile.image} alt={tile.title} className={classes.favImage} />\n                                <h3>{tile.title}</h3>\n                                {clearButton(tile.title)}\n                            </div>\n                        ))}\n                    </div>\n                    :\n                    <p>お気に入り画像はありません</p>\n                }\n            </div>\n        )\n    }\n\n    return (\n        <div className={classes.main}>\n            {showFavImage()}\n            <Button variant=\"contained\" onClick={() => history.push('/')} className={classes.btn}>TOPPAGEに戻る</Button>\n        </div>\n    );\n}\n\nexport default FavItemlist;","import React, { FC } from 'react';\nimport TopHeader from '../components/TopPage/TopHeader';\nimport TopFooter from '../components/TopPage/TopFooter';\nimport FavItemlist from '../components/FavPage/FavItemlist';\n\nconst FavPage: FC = () => {\n    return (\n        <div>\n            <TopHeader/>\n            <FavItemlist/>\n            <TopFooter/>\n        </div>\n    );\n}\n\nexport default FavPage;","import React, { FC } from 'react';\n//FCは関数コンポーネント\nimport { BrowserRouter as Router, Switch, Route, } from 'react-router-dom';\nimport TopHeader from '../components/TopPage/TopHeader';\nimport TopFooter from '../components/TopPage/TopFooter';\nimport TopMain from '../components/TopPage/TopMain';\nimport DownloadPage from './DownloadPage';\nimport ResultPage from './ResultPage';\nimport FavPage from './FavPage';\n\n\n//関数コンポーネント 関数にFC型をセットしてFC型の戻り値を返すように設定する。\nconst TopPage: FC = () => {\n    return (\n        <div>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <TopHeader />\n                        <TopMain />\n                        <TopFooter />\n                    </Route>\n                    <Route path=\"/search/:keyword\" exact>\n                        <ResultPage/>\n                    </Route>\n                    <Route path=\"/download/:keyword\" exact>\n                        <DownloadPage/>\n                    </Route>\n                    <Route path=\"/favorite/\">\n                        <FavPage/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default TopPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TopPage from './pages/TopPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TopPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}